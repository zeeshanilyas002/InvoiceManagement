@model InvoiceManagement.Models.Invoice

@{
    ViewData["Title"] = Model.InvoiceId == 0 ? "Add Invoice" : "Edit Invoice";
}

<h1>@ViewData["Title"]</h1>

<form asp-action="CreateOrEditInvoice" method="post" id="invoiceForm">
    <input type="hidden" asp-for="InvoiceId" />

    <!-- Customer Details Section -->
    <div class="form-group">
        <label for="CustomerName">Customer Name</label>
        <input type="text" asp-for="CustomerName" class="form-control" placeholder="Enter Customer Name" />
        <span asp-validation-for="CustomerName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label for="InvoiceDate">Invoice Date</label>
        <input type="date" asp-for="InvoiceDate" class="form-control" />
        <span asp-validation-for="InvoiceDate" class="text-danger"></span>
    </div>

    <!-- Products Section -->
    <h3>Products</h3>
    <table class="table" id="productTable">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Total</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var detail in Model.InvoiceDetails)
            {
                <tr>
                    <td>
                        <select name="InvoiceDetails[@Model.InvoiceDetails.IndexOf(detail)].ProductId" class="form-control">
                            <option value="">Select Product</option>
                            @foreach (var product in (List<SelectListItem>)ViewData["Products"])
                            {
                                if (product.Value == detail.ProductId.ToString())
                                {
                                    <option value="@product.Value" selected>@product.Text</option>
                                }
                                else
                                {
                                    <option value="@product.Value">@product.Text</option>
                                }
                            }
                        </select>
                    </td>
                    <td><input type="number" name="InvoiceDetails[@Model.InvoiceDetails.IndexOf(detail)].Quantity" class="form-control quantity" value="@detail.Quantity" /></td>
                    <td><input type="number" name="InvoiceDetails[@Model.InvoiceDetails.IndexOf(detail)].UnitPrice" class="form-control unitPrice" value="@detail.UnitPrice" /></td>
                    <td><input type="text" class="form-control totalPrice" readonly value="@detail.TotalPrice.ToString()" /></td>
                    <td><button type="button" class="btn btn-danger btn-sm removeRow">Remove</button></td>
                </tr>
            }
        </tbody>
    </table>
    <button type="button" id="addProductRow" class="btn btn-secondary">Add Product</button>

    <!-- Invoice Total -->
    <h4 class="mt-4">Total Amount: <span id="totalAmount">0.00</span></h4>

    <!-- Save and Cancel Buttons -->
    <div class="form-group mt-4">
        <button type="submit" class="btn btn-primary">Save</button>
        <a asp-action="Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    <script>
        // Add Product Row
        document.getElementById("addProductRow").addEventListener("click", function () {
            const table = document.querySelector("#productTable tbody");
            const rowCount = table.rows.length;

            // Generate dropdown options dynamically from ViewBag
            const productOptions = `
                @foreach (var product in (List<SelectListItem>)ViewBag.Products)
                {
                    <option value="@product.Value">@product.Text</option>
                }
            `;

            const row = table.insertRow();
            row.innerHTML = `
                <td>
                    <select name="InvoiceDetails[${rowCount}].ProductId" class="form-control">
                        <option value="">Select Product</option>
                        ${productOptions}
                    </select>
                </td>
                <td><input type="number" name="InvoiceDetails[${rowCount}].Quantity" class="form-control quantity" value="1" /></td>
                <td><input type="number" name="InvoiceDetails[${rowCount}].UnitPrice" class="form-control unitPrice" value="0" /></td>
                <td><input type="text" class="form-control totalPrice" readonly value="0" /></td>
                <td><button type="button" class="btn btn-danger btn-sm removeRow">Remove</button></td>
            `;
        });

        // Remove Product Row
        document.addEventListener("click", function (e) {
            if (e.target.classList.contains("removeRow")) {
                e.target.closest("tr").remove();
                calculateTotalAmount();
            }
        });

        // Calculate Total Price and Amount
        document.addEventListener("input", function (e) {
            if (e.target.closest("#productTable")) {
                const row = e.target.closest("tr");
                const quantity = row.querySelector(".quantity").value || 0;
                const unitPrice = row.querySelector(".unitPrice").value || 0;
                const totalPrice = row.querySelector(".totalPrice");

                totalPrice.value = (quantity * unitPrice).toFixed(2);
                calculateTotalAmount();
            }
        });

        function calculateTotalAmount() {
            let total = 0;
            document.querySelectorAll("#productTable .totalPrice").forEach((item) => {
                total += parseFloat(item.value) || 0;
            });
            document.getElementById("totalAmount").innerText = total.toFixed(2);
        }
    </script>
}
